---
import api from "@api.json";
import ThemedCode from "./themed-code.astro";

interface Props {
	entry: keyof typeof api;
}

const { entry }: Props = Astro.props;

const apiEntry = api[entry];

type TextContent = {
	type: "text";
	content: string;
};

type CodeContent = {
	type: "code";
	content: string;
};
type Parsed = TextContent | CodeContent;

function parseText(text: string): Parsed[] {
	// Everything wrapped in backticks is CodeContent. Everything else is TextContent.
	const res: Parsed[] = [];

	let curr: Parsed = {
		type: "text",
		content: "",
	};
	for (const char of text) {
		if (char === "`") {
			res.push(curr);
			curr = {
				type: curr.type === "text" ? "code" : "text",
				content: "",
			};
			continue;
		}

		curr.content += char;
	}
	res.push(curr);

	return res;
}

type Section = {
	title: string;
	description: string;
	stuff: (typeof apiEntry)[keyof typeof apiEntry];
};

const sections: Section[] = [
	{
		title: "Constructor Props",
		description: "The props that are passed when calling `" + `new ${entry}()` + "`",
		stuff: apiEntry.constructorProps,
	},
	{
		title: "Methods",
		description: "The methods returned from `" + `new ${entry}()` + "`",
		stuff: apiEntry.methods,
	},
	{
		title: "Properties",
		description: "The properties returned from `" + `new ${entry}()` + "`",
		stuff: apiEntry.properties,
	},
];
---

<div class="!mt-8 flex flex-col gap-4">
	{
		sections.map((section) => (
			<div>
				<h3>{section.title}</h3>
				<div>
					{parseText(section.description).map((c) =>
						c.type === "text" ? c.content : <ThemedCode code={c.content} inline />,
					)}
				</div>
				<ul class="ml-0 pl-0">
					{section.stuff.map((entry) => (
						<li class="relative !mt-8 list-none py-0 pl-6">
							<div class="absolute left-0 top-0 h-full w-1.5 overflow-hidden rounded-full bg-gray-200 dark:bg-gray-700/50" />
							<h4 class="flex items-baseline gap-2 !text-lg">
								<span class="bg-accent-200/50 dark:bg-accent-950 dark:text-accent-200 rounded-lg px-2 py-0.5 font-mono font-normal">
									{entry.name}
								</span>
								<span class="font-light italic text-gray-400">
									{"optional" in entry && entry.optional ? "(optional)" : ""}
								</span>
							</h4>
							<ThemedCode code={entry.type} />
							<div>
								{parseText(entry.description).map((c) =>
									c.type === "text" ? (
										<span class="whitespace-pre-wrap">{c.content}</span>
									) : (
										<ThemedCode code={c.content} inline />
									),
								)}
							</div>
							{"defaultValue" in entry && entry.defaultValue && (
								<div class="dark:text-gray-300">
									<i>Default:</i> <ThemedCode code={entry.defaultValue} inline />
								</div>
							)}
						</li>
					))}
				</ul>
			</div>
		))
	}
</div>
