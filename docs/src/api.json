{
  "Tree": {
    "constructorProps": [
      {
        "name": "multiple",
        "type": "MaybeGetter<Multiple | undefined>",
        "description": "If `true`, the user can select multiple items.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "selected",
        "type": "MaybeMultiple<string, Multiple> | undefined",
        "description": "The currently selected item(s).\nIf `multiple` is `true`, this should be an `Iterable`.\nOtherwise, it'll be a `string`.",
        "defaultValue": "undefined",
        "optional": true
      },
      {
        "name": "onSelectedChange",
        "type": "| ((value: Multiple extends true ? Set<string> : string | undefined) => void)\n  | undefined",
        "description": "Callback fired when selection changes",
        "optional": true
      },
      {
        "name": "expanded",
        "type": "IterableProp<string>",
        "description": "The currently expanded items",
        "defaultValue": "undefined",
        "optional": true
      },
      {
        "name": "onExpandedChange",
        "type": "((value: Set<string>) => void) | undefined",
        "description": "Callback fired when expanded state changes",
        "optional": true
      },
      {
        "name": "expandOnClick",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If `true`, groups (items with children) expand on click.",
        "defaultValue": "true",
        "optional": true
      },
      {
        "name": "items",
        "type": "IterableProp<I>",
        "description": "The items contained in the tree.",
        "optional": false
      },
      {
        "name": "typeaheadTimeout",
        "type": "MaybeGetter<number | undefined>",
        "description": "How many time (in ms) the typeahead string is held before it is cleared",
        "defaultValue": "500",
        "optional": true
      }
    ],
    "methods": [
      {
        "name": "isSelected",
        "type": "(id: string) => boolean",
        "description": "Checks if an item is currently selected\n@param id - ID of the item to check"
      },
      {
        "name": "isExpanded",
        "type": "(id: string) => boolean",
        "description": "Checks if an item is currently expanded\n@param id - ID of the item to check"
      },
      {
        "name": "expand",
        "type": "(id: string) => void",
        "description": "Expands a specific item\n@param id - ID of the item to expand"
      },
      {
        "name": "collapse",
        "type": "(id: string) => void",
        "description": "Collapses a specific item\n@param id - ID of the item to collapse"
      },
      {
        "name": "toggleExpand",
        "type": "(id: string) => void",
        "description": "Toggles the expanded state of an item\n@param id - ID of the item to toggle"
      },
      {
        "name": "select",
        "type": "(id: string) => void",
        "description": "Selects a specific item\n@param id - ID of the item to select"
      },
      {
        "name": "deselect",
        "type": "(id: string) => void",
        "description": "Deselects a specific item\n@param id - ID of the item to deselect"
      },
      {
        "name": "clearSelection",
        "type": "() => void",
        "description": "Clears all current selections"
      },
      {
        "name": "toggleSelect",
        "type": "(id: string) => void",
        "description": "Toggles the selected state of an item\n@param id - ID of the item to toggle"
      },
      {
        "name": "selectAll",
        "type": "() => void",
        "description": "Selects all visible items.\nIf all items are already selected, clears the selection."
      },
      {
        "name": "getItemId",
        "type": "(id: string) => string",
        "description": "Gets the DOM ID for a specific tree item\n@param id - ID of the item"
      },
      {
        "name": "getItemEl",
        "type": "(id: string) => HTMLElement | null",
        "description": "Gets the DOM element for a specific tree item\n@param id - ID of the item"
      },
      {
        "name": "selectUntil",
        "type": "(id: string) => void",
        "description": "Selects all items between the last selected item and the specified item\n@param id - ID of the item to select until"
      }
    ],
    "properties": [
      {
        "name": "collection",
        "type": "Collection<I>",
        "description": "The items contained in the tree"
      },
      {
        "name": "multiple",
        "type": "Multiple",
        "description": "If `true`, the user can select multiple items holding `Control`/`Meta` or `Shift`"
      },
      {
        "name": "expandOnClick",
        "type": "boolean",
        "description": "If `true`, groups (items with children) expand on click"
      },
      {
        "name": "typeaheadTimeout",
        "type": "number",
        "description": ""
      },
      {
        "name": "typeahead",
        "type": "(letter: string) => { child: Child<I>; value: string } | undefined",
        "description": ""
      },
      {
        "name": "items",
        "type": "I[]",
        "description": ""
      },
      {
        "name": "selected",
        "type": "FalseIfUndefined<Multiple>>",
        "description": "Currently selected item(s)\nFor multiple selection, returns a Set of IDs\nFor single selection, returns a single ID or undefined"
      },
      {
        "name": "expanded",
        "type": "SvelteSet<string>",
        "description": "Set of currently expanded item IDs"
      },
      {
        "name": "root",
        "type": "{ role: string; \"data-melt-tree-root\": string }",
        "description": "Gets ARIA attributes for the root tree element"
      },
      {
        "name": "group",
        "type": "{ role: string; \"data-melt-tree-group\": string }",
        "description": "ARIA attributes for group elements"
      },
      {
        "name": "children",
        "type": "Child<I>[]",
        "description": "Array of Child instances representing the top-level items"
      }
    ],
    "propsAlt": "\n\nexport type TreeProps<Item extends TreeItem, Multiple extends boolean = false> = {\n  /**\n   * If `true`, the user can select multiple items.\n   * @default false\n   */\n  multiple?: MaybeGetter<Multiple | undefined>;\n  /**\n   * The currently selected item(s).\n   * If `multiple` is `true`, this should be an `Iterable`.\n   * Otherwise, it'll be a `string`.\n   * @default undefined\n   */\n  selected?: MaybeMultiple<string, Multiple>;\n  /**\n   * Callback fired when selection changes\n   * @param value - For multiple selection, a Set of selected IDs. For single selection, a single ID or undefined\n   */\n  onSelectedChange?: (value: Multiple extends true ? Set<string> : string | undefined) => void;\n  /**\n   * The currently expanded items\n   *\n   * @default undefined\n   */\n  expanded?: MaybeMultiple<string, true>;\n  /**\n   * Callback fired when expanded state changes\n   * @param value - Set of expanded item IDs\n   */\n  onExpandedChange?: (value: Set<string>) => void;\n  /**\n   * If `true`, groups (items with children) expand on click.\n   * @default true\n   */\n  expandOnClick?: MaybeGetter<boolean | undefined>;\n  /**\n   * The items contained in the tree.\n   * @required\n   */\n  items: IterableProp<Item>;\n  /**\n   * How many time (in ms) the typeahead string is held before it is cleared\n   * @default 500\n   */\n  typeaheadTimeout?: MaybeGetter<number | undefined>;\n};"
  },
  "Tooltip": {
    "constructorProps": [
      {
        "name": "open",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If the Tooltip is open.\n\nWhen passing a getter, it will be used as source of truth,\nmeaning that the value only changes when the getter returns a new value.\n\nOtherwise, if passing a static value, it'll serve as the default value.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "onOpenChange",
        "type": "((value: boolean) => void) | undefined",
        "description": "Called when the value is supposed to change.",
        "optional": true
      },
      {
        "name": "arrowSize",
        "type": "MaybeGetter<number | undefined>",
        "description": "Size of tooltip arrow in pixels.",
        "defaultValue": "8",
        "optional": true
      },
      {
        "name": "closeOnPointerDown",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If `true`, tooltip will close if trigger is pressed.",
        "defaultValue": "true",
        "optional": true
      },
      {
        "name": "openDelay",
        "type": "MaybeGetter<number | undefined>",
        "description": "Tooltip open delay in milliseconds.",
        "defaultValue": "1000",
        "optional": true
      },
      {
        "name": "closeDelay",
        "type": "MaybeGetter<number | undefined>",
        "description": "Tooltip close delay in milliseconds.",
        "defaultValue": "0",
        "optional": true
      },
      {
        "name": "floatingConfig",
        "type": "UseFloatingConfig | undefined>",
        "description": "Config to be passed to `useFloating`",
        "optional": true
      },
      {
        "name": "forceVisible",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If the popover visibility should be controlled by the user.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "disableHoverableContent",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If `true`, leaving trigger will close the tooltip.",
        "defaultValue": "false",
        "optional": true
      }
    ],
    "methods": [],
    "properties": [
      {
        "name": "closeOnPointerDown",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "openDelay",
        "type": "number",
        "description": ""
      },
      {
        "name": "closeDelay",
        "type": "number",
        "description": ""
      },
      {
        "name": "disableHoverableContent",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "arrowSize",
        "type": "number",
        "description": ""
      },
      {
        "name": "forceVisible",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "isVisible",
        "type": "boolean",
        "description": "State"
      },
      {
        "name": "open",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "trigger",
        "type": "{\n  readonly onfocusout: () => Promise<void>\n  readonly \"data-melt-tooltip-trigger\": \"\"\n  readonly id: string\n  readonly \"aria-describedby\": string\n  readonly \"data-open\": \"\" | undefined\n  readonly onpointerdown: () => void\n  readonly onpointerenter: (\n    e: PointerEvent & { currentTarget: EventTarget & HTMLElement },\n  ) => void\n  readonly onpointerleave: (\n    e: PointerEvent & { currentTarget: EventTarget & HTMLElement },\n  ) => void\n  readonly onfocus: () => void\n  readonly onblur: () => void\n}",
        "description": ""
      },
      {
        "name": "content",
        "type": "{\n  readonly onfocusout: () => Promise<void>\n  readonly \"data-melt-tooltip-content\": \"\"\n  readonly id: string\n  readonly popover: \"manual\"\n  readonly role: \"tooltip\"\n  readonly tabindex: -1\n  readonly style: \"overflow: visible;\"\n  readonly inert: boolean\n  readonly \"data-open\": \"\" | undefined\n  readonly onpointerenter: () => void\n  readonly onpointerleave: () => void\n  readonly onpointerdown: () => void\n}",
        "description": ""
      },
      {
        "name": "arrow",
        "type": "{\n  readonly \"data-melt-tooltip-arrow\": \"\"\n  readonly id: string\n  readonly \"data-arrow\": \"\"\n  readonly \"data-open\": \"\" | undefined\n  readonly style: `position: absolute; width: var(--arrow-size, ${number}px); height: var(--arrow-size, ${number}px);`\n}",
        "description": ""
      }
    ],
    "propsAlt": "export type TooltipProps = {\n  /**\n   * If the Tooltip is open.\n   *\n   * When passing a getter, it will be used as source of truth,\n   * meaning that the value only changes when the getter returns a new value.\n   *\n   * Otherwise, if passing a static value, it'll serve as the default value.\n   *\n   * @default false\n   */\n  open?: MaybeGetter<boolean | undefined>;\n\n  /**\n   * Called when the value is supposed to change.\n   */\n  onOpenChange?: (value: boolean) => void;\n\n  /**\n   * Size of tooltip arrow in pixels.\n   *\n   * @default 8\n   */\n  arrowSize?: MaybeGetter<number | undefined>;\n\n  /**\n   * If `true`, tooltip will close if trigger is pressed.\n   *\n   * @default true\n   */\n  closeOnPointerDown?: MaybeGetter<boolean | undefined>;\n\n  /**\n   * Tooltip open delay in milliseconds.\n   *\n   * @default 1000\n   */\n  openDelay?: MaybeGetter<number | undefined>;\n\n  /**\n   * Tooltip close delay in milliseconds.\n   *\n   * @default 0\n   */\n  closeDelay?: MaybeGetter<number | undefined>;\n\n  /**\n   * Config to be passed to `useFloating`\n   */\n  floatingConfig?: UseFloatingArgs[\"config\"];\n\n  /**\n   * If the popover visibility should be controlled by the user.\n   *\n   * @default false\n   */\n  forceVisible?: MaybeGetter<boolean | undefined>;\n\n  /**\n   * If `true`, leaving trigger will close the tooltip.\n   *\n   * @default false\n   */\n  disableHoverableContent?: MaybeGetter<boolean | undefined>;\n};"
  },
  "Toggle": {
    "constructorProps": [
      {
        "name": "value",
        "type": "MaybeGetter<boolean> | undefined",
        "description": "The value for the Toggle.\n\nWhen passing a getter, it will be used as source of truth,\nmeaning that the value only changes when the getter returns a new value.\n\nOtherwise, if passing a static value, it'll serve as the default value.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "onValueChange",
        "type": "((value: boolean) => void) | undefined",
        "description": "Called when the value is supposed to change.",
        "optional": true
      },
      {
        "name": "disabled",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If `true`, prevents the user from interacting with the input.",
        "defaultValue": "false",
        "optional": true
      }
    ],
    "methods": [],
    "properties": [
      {
        "name": "disabled",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "value",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "trigger",
        "type": "{\n  readonly \"data-melt-toggle-trigger\": \"\"\n  readonly \"data-checked\": \"\" | undefined\n  readonly \"aria-pressed\": boolean\n  readonly disabled: true | undefined\n  readonly onclick: () => void\n}",
        "description": "The trigger that toggles the value."
      },
      {
        "name": "hiddenInput",
        "type": "{\n  readonly \"data-melt-toggle-hidden-input\": \"\"\n  readonly type: \"hidden\"\n  readonly value: \"on\" | \"off\"\n}",
        "description": "A hidden input field to use within forms."
      }
    ],
    "propsAlt": "export type ToggleProps = {\n  /**\n   * The value for the Toggle.\n   *\n   * When passing a getter, it will be used as source of truth,\n   * meaning that the value only changes when the getter returns a new value.\n   *\n   * Otherwise, if passing a static value, it'll serve as the default value.\n   *\n   *\n   * @default false\n   */\n  value?: MaybeGetter<boolean>;\n  /**\n   * Called when the value is supposed to change.\n   */\n  onValueChange?: (value: boolean) => void;\n\n  /**\n   * If `true`, prevents the user from interacting with the input.\n   *\n   * @default false\n   */\n  disabled?: MaybeGetter<boolean | undefined>;\n};"
  },
  "Toaster": {
    "constructorProps": [
      {
        "name": "closeDelay",
        "type": "MaybeGetter<number | undefined>",
        "description": "The delay in milliseconds before the toast closes. Set to 0 to disable.",
        "defaultValue": "5000",
        "optional": true
      },
      {
        "name": "type",
        "type": "MaybeGetter<\"assertive\" | \"polite\" | undefined>",
        "description": "The sensitivity of the toast for accessibility purposes.\nhttps://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-live",
        "defaultValue": "'polite'",
        "optional": true
      },
      {
        "name": "hover",
        "type": "MaybeGetter<\"pause\" | \"pause-all\" | null | undefined>",
        "description": "The behaviour when a toast is hovered.",
        "defaultValue": "'pause'",
        "optional": true
      }
    ],
    "methods": [],
    "properties": [
      {
        "name": "ids",
        "type": "{ root: string }",
        "description": ""
      },
      {
        "name": "closeDelay",
        "type": "number",
        "description": ""
      },
      {
        "name": "type",
        "type": "\"assertive\" | \"polite\"",
        "description": ""
      },
      {
        "name": "hover",
        "type": "\"pause\" | \"pause-all\"",
        "description": ""
      },
      {
        "name": "toasts",
        "type": "Toast<T>[]",
        "description": "The active toasts."
      },
      {
        "name": "addToast",
        "type": "(props: AddToastProps<T>) => Toast<T>",
        "description": "Adds a toast."
      },
      {
        "name": "removeToast",
        "type": "(id: string) => void",
        "description": "Removes the toast with the specified ID.\n@param id The id of the toast."
      },
      {
        "name": "updateToast",
        "type": "(id: string, data: T) => void",
        "description": "Updates a toast's data.\n@param id The id of the toast.\n@param data The updated data."
      },
      {
        "name": "root",
        "type": "{\n  readonly \"data-melt-toaster-root\": \"\"\n  readonly id: string\n  readonly popover: \"manual\"\n}",
        "description": "Spread attributes for the container of the toasts."
      }
    ],
    "propsAlt": "export type ToasterProps = {\n  /**\n   * The delay in milliseconds before the toast closes. Set to 0 to disable.\n   * @default 5000\n   */\n  closeDelay?: MaybeGetter<number | undefined>;\n\n  /**\n   * The sensitivity of the toast for accessibility purposes.\n   * https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-live\n   * @default 'polite'\n   */\n  type?: MaybeGetter<\"assertive\" | \"polite\" | undefined>;\n\n  /**\n   * The behaviour when a toast is hovered.\n   * @default 'pause'\n   */\n  hover?: MaybeGetter<\"pause\" | \"pause-all\" | null | undefined>;\n};"
  },
  "Tabs": {
    "constructorProps": [
      {
        "name": "selectWhenFocused",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If `true`, the value will be changed whenever a trigger is focused.",
        "defaultValue": "true",
        "optional": true
      },
      {
        "name": "loop",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If the the trigger selection should loop when navigating with the arrow keys.",
        "defaultValue": "true",
        "optional": true
      },
      {
        "name": "orientation",
        "type": "MaybeGetter<\"horizontal\" | \"vertical\" | undefined>",
        "description": "The orientation of the tabs.",
        "defaultValue": "\"horizontal\"",
        "optional": true
      },
      {
        "name": "value",
        "type": "MaybeGetter<T>",
        "description": "The default value for `tabs.value`\n\nWhen passing a getter, it will be used as source of truth,\nmeaning that `tabs.value` only changes when the getter returns a new value.",
        "optional": false
      },
      {
        "name": "onValueChange",
        "type": "((active: T) => void) | undefined",
        "description": "Called when the `Tabs` instance tries to change the active tab.",
        "optional": true
      }
    ],
    "methods": [
      {
        "name": "getTrigger",
        "type": "(value: T) => {\n  readonly \"data-melt-tabs-trigger\": T\n  readonly \"data-active\": \"\" | undefined\n  readonly tabindex: 0 | -1\n  readonly role: \"tab\"\n  readonly \"aria-selected\": boolean\n  readonly \"aria-controls\": string\n  readonly \"data-orientation\": \"horizontal\" | \"vertical\"\n  readonly onclick: () => T\n  readonly onkeydown: (e: KeyboardEvent) => void\n  readonly id: string\n}",
        "description": "Gets the attributes and listeners for a tab trigger. Requires an identifying tab value."
      },
      {
        "name": "getContent",
        "type": "(value: T) => {\n  readonly \"data-melt-tabs-content\": \"\"\n  readonly hidden: boolean\n  readonly \"data-active\": \"\" | undefined\n  readonly role: \"tabpanel\"\n  readonly id: string\n  readonly \"aria-labelledby\": string\n  readonly \"data-orientation\": \"horizontal\" | \"vertical\"\n}",
        "description": "Gets the attributes and listeners for the tabs contents. Requires an identifying tab value."
      }
    ],
    "properties": [
      {
        "name": "selectWhenFocused",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "loop",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "orientation",
        "type": "\"horizontal\" | \"vertical\"",
        "description": ""
      },
      {
        "name": "value",
        "type": "T",
        "description": "The current selected tab."
      },
      {
        "name": "triggerList",
        "type": "{\n  readonly \"data-melt-tabs-trigger-list\": \"\"\n  readonly role: \"tablist\"\n  readonly \"aria-orientation\": \"horizontal\" | \"vertical\"\n  readonly \"data-orientation\": \"horizontal\" | \"vertical\"\n}",
        "description": "The attributes for the list that contains the tab triggers."
      }
    ],
    "propsAlt": "export type TabsProps<T extends string = string> = {\n  /**\n   * If `true`, the value will be changed whenever a trigger is focused.\n   *\n   * @default true\n   */\n  selectWhenFocused?: MaybeGetter<boolean | undefined>;\n  /**\n   * If the the trigger selection should loop when navigating with the arrow keys.\n   *\n   * @default true\n   */\n  loop?: MaybeGetter<boolean | undefined>;\n  /**\n   * The orientation of the tabs.\n   *\n   * @default \"horizontal\"\n   */\n  orientation?: MaybeGetter<\"horizontal\" | \"vertical\" | undefined>;\n  /**\n   * The default value for `tabs.value`\n   *\n   * When passing a getter, it will be used as source of truth,\n   * meaning that `tabs.value` only changes when the getter returns a new value.\n   *\n   */\n  value: MaybeGetter<T>;\n  /**\n   * Called when the `Tabs` instance tries to change the active tab.\n   */\n  onValueChange?: (active: T) => void;\n};"
  },
  "Slider": {
    "constructorProps": [
      {
        "name": "min",
        "type": "MaybeGetter<number | undefined>",
        "description": "The minimum value of the slider.",
        "defaultValue": "0",
        "optional": true
      },
      {
        "name": "max",
        "type": "MaybeGetter<number | undefined>",
        "description": "The maximum value of the slider.",
        "defaultValue": "100",
        "optional": true
      },
      {
        "name": "orientation",
        "type": "MaybeGetter<\"horizontal\" | \"vertical\" | undefined>",
        "description": "The orientation of the slider.",
        "defaultValue": "\"horizontal\"",
        "optional": true
      },
      {
        "name": "step",
        "type": "MaybeGetter<number | undefined>",
        "description": "The step size of the slider.",
        "defaultValue": "1",
        "optional": true
      },
      {
        "name": "value",
        "type": "MaybeGetter<number | undefined>",
        "description": "The default value for `tabs.value`\n\nWhen passing a getter, it will be used as source of truth,\nmeaning that `tabs.value` only changes when the getter returns a new value.\n\nIf omitted, it will use the first tab as default.",
        "defaultValue": "undefined",
        "optional": true
      },
      {
        "name": "onValueChange",
        "type": "((active: number) => void) | undefined",
        "description": "Called when the `Slider` instance tries to change the active tab.",
        "optional": true
      }
    ],
    "methods": [],
    "properties": [
      {
        "name": "min",
        "type": "number",
        "description": ""
      },
      {
        "name": "max",
        "type": "number",
        "description": ""
      },
      {
        "name": "orientation",
        "type": "\"horizontal\" | \"vertical\"",
        "description": ""
      },
      {
        "name": "step",
        "type": "number",
        "description": ""
      },
      {
        "name": "ids",
        "type": "{ root: string; thumb: string }",
        "description": ""
      },
      {
        "name": "value",
        "type": "number",
        "description": "The value of the slider."
      },
      {
        "name": "root",
        "type": "{\n  readonly \"data-dragging\": \"\" | undefined\n  readonly \"data-value\": number\n  readonly \"data-orientation\": \"horizontal\" | \"vertical\"\n  readonly \"aria-valuenow\": number\n  readonly \"aria-valuemin\": number\n  readonly \"aria-valuemax\": number\n  readonly \"aria-orientation\": \"horizontal\" | \"vertical\"\n  readonly style: `--percentage: ${string}; --percentage-inv: ${string}; touch-action: ${string}`\n  readonly tabindex: 0\n  readonly role: \"slider\"\n  readonly \"data-melt-slider-root\": \"\"\n  readonly id: string\n  readonly onpointerdown: (e: PointerEvent) => void\n  readonly onkeydown: (e: KeyboardEvent) => void\n}",
        "description": "The root of the slider.\nAny cursor interaction along this element will change the slider's values."
      },
      {
        "name": "thumb",
        "type": "{\n  readonly \"data-dragging\": \"\" | undefined\n  readonly \"data-value\": number\n  readonly \"data-orientation\": \"horizontal\" | \"vertical\"\n  readonly \"data-melt-slider-thumb\": \"\"\n  readonly id: string\n  readonly tabindex: 0\n}",
        "description": "The slider's thumb, positioned at the end of the range."
      }
    ],
    "propsAlt": "export type SliderProps = {\n  /**\n   * The minimum value of the slider.\n   *\n   * @default 0\n   */\n  min?: MaybeGetter<number | undefined>;\n  /**\n   * The maximum value of the slider.\n   *\n   * @default 100\n   */\n  max?: MaybeGetter<number | undefined>;\n  /**\n   * The orientation of the slider.\n   *\n   * @default \"horizontal\"\n   */\n  orientation?: MaybeGetter<\"horizontal\" | \"vertical\" | undefined>;\n\n  /**\n   * The step size of the slider.\n   *\n   * @default 1\n   */\n  step?: MaybeGetter<number | undefined>;\n\n  /**\n   * The default value for `tabs.value`\n   *\n   * When passing a getter, it will be used as source of truth,\n   * meaning that `tabs.value` only changes when the getter returns a new value.\n   *\n   * If omitted, it will use the first tab as default.\n   *\n   * @default undefined\n   */\n  value?: MaybeGetter<number | undefined>;\n  /**\n   * Called when the `Slider` instance tries to change the active tab.\n   */\n  onValueChange?: (active: number) => void;\n};"
  },
  "Select": {
    "constructorProps": [
      {
        "name": "open",
        "type": "any",
        "description": "If the Popover is open.\n\nWhen passing a getter, it will be used as source of truth,\nmeaning that the value only changes when the getter returns a new value.\n\nOtherwise, if passing a static value, it'll serve as the default value.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "onOpenChange",
        "type": "any",
        "description": "Called when the value is supposed to change.",
        "optional": true
      },
      {
        "name": "forceVisible",
        "type": "any",
        "description": "If the popover visibility should be controlled by the user.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "floatingConfig",
        "type": "any",
        "description": "Config to be passed to `useFloating`",
        "optional": true
      },
      {
        "name": "closeOnEscape",
        "type": "any",
        "description": "If the popover should close when clicking escape.",
        "defaultValue": "true",
        "optional": true
      },
      {
        "name": "closeOnOutsideClick",
        "type": "any",
        "description": "If the popover should close when clicking outside.\nAlternatively, accepts a function that receives the clicked element,\nand returns if the popover should close.",
        "defaultValue": "true",
        "optional": true
      },
      {
        "name": "multiple",
        "type": "MaybeGetter<Multiple | undefined>",
        "description": "If `true`, multiple options can be selected at the same time.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "value",
        "type": "MaybeMultiple<T, Multiple> | undefined",
        "description": "The value for the Select.\n\nWhen passing a getter, it will be used as source of truth,\nmeaning that the value only changes when the getter returns a new value.\n\nOtherwise, if passing a static value, it'll serve as the default value.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "onValueChange",
        "type": "OnMultipleChange<T, Multiple> | undefined",
        "description": "Called when the value is supposed to change.",
        "optional": true
      },
      {
        "name": "typeaheadTimeout",
        "type": "MaybeGetter<number | undefined>",
        "description": "How many time (in ms) the typeahead string is held before it is cleared",
        "defaultValue": "500",
        "optional": true
      },
      {
        "name": "sameWidth",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If the content should have the same width as the trigger",
        "defaultValue": "true",
        "optional": true
      }
    ],
    "methods": [
      {
        "name": "getOptionId",
        "type": "(value: T) => string",
        "description": ""
      },
      {
        "name": "getOption",
        "type": "(value: T) => {\n  readonly \"data-melt-select-option\": \"\"\n  readonly \"data-value\": DataReturn<T>\n  readonly \"aria-hidden\": true | undefined\n  readonly \"aria-selected\": boolean\n  readonly \"data-highlighted\": \"\" | undefined\n  readonly role: \"option\"\n  readonly onmouseover: () => void\n  readonly onclick: () => void\n}",
        "description": ""
      }
    ],
    "properties": [
      {
        "name": "multiple",
        "type": "Multiple extends null | undefined\n  ? Multiple | undefined\n  : Multiple | Exclude<Multiple, null | undefined>",
        "description": ""
      },
      {
        "name": "highlighted",
        "type": "T | null",
        "description": ""
      },
      {
        "name": "ids",
        "type": "{ trigger: string; content: string; option: string } & {\n  invoker: string\n  popover: string\n}",
        "description": ""
      },
      {
        "name": "typeaheadTimeout",
        "type": "number",
        "description": ""
      },
      {
        "name": "typeahead",
        "type": "(letter: string) => { value: T; current: boolean } | undefined",
        "description": ""
      },
      {
        "name": "isSelected",
        "type": "(value: T) => boolean",
        "description": ""
      },
      {
        "name": "select",
        "type": "(value: T) => void",
        "description": ""
      },
      {
        "name": "value",
        "type": "SelectionStateValue<T, Multiple>",
        "description": ""
      },
      {
        "name": "valueAsString",
        "type": "string",
        "description": ""
      },
      {
        "name": "trigger",
        "type": "{\n  readonly onfocusout: () => Promise<void>\n  readonly id: string\n  readonly popovertarget: string\n  readonly onclick: (e: Event) => void\n} & {\n  \"data-melt-select-trigger\": string\n  role: string\n  \"aria-expanded\": boolean\n  \"aria-controls\": string\n  \"aria-owns\": string\n  onkeydown: (e: KeyboardEvent) => void\n}",
        "description": ""
      },
      {
        "name": "content",
        "type": "{\n  readonly onfocusout: () => Promise<void>\n  readonly id: string\n  readonly popover: \"manual\"\n  readonly ontoggle: (\n    e: ToggleEvent & { currentTarget: EventTarget & HTMLElement },\n  ) => void\n  readonly tabindex: -1\n  readonly inert: boolean\n  readonly \"data-open\": \"\" | undefined\n} & {\n  readonly \"data-melt-select-content\": \"\"\n  readonly role: \"listbox\"\n  readonly \"aria-expanded\": boolean\n  readonly \"aria-activedescendant\": string | undefined\n  readonly onkeydown: (e: KeyboardEvent) => void\n}",
        "description": ""
      }
    ],
    "propsAlt": "export type SelectProps<T extends string, Multiple extends boolean = false> = Omit<\n  PopoverProps,\n  \"sameWidth\"\n> & {\n  /**\n   * If `true`, multiple options can be selected at the same time.\n   *\n   * @default false\n   */\n  multiple?: MaybeGetter<Multiple | undefined>;\n\n  /**\n   * The value for the Select.\n   *\n   * When passing a getter, it will be used as source of truth,\n   * meaning that the value only changes when the getter returns a new value.\n   *\n   * Otherwise, if passing a static value, it'll serve as the default value.\n   *\n   *\n   * @default false\n   */\n  value?: MaybeMultiple<T, Multiple>;\n  /**\n   * Called when the value is supposed to change.\n   */\n  onValueChange?: OnMultipleChange<T, Multiple>;\n\n  /**\n   * How many time (in ms) the typeahead string is held before it is cleared\n   * @default 500\n   */\n  typeaheadTimeout?: MaybeGetter<number | undefined>;\n\n  /**\n   * If the content should have the same width as the trigger\n   *\n   * @default true\n   */\n  sameWidth?: MaybeGetter<boolean | undefined>;\n};"
  },
  "RadioGroup": {
    "constructorProps": [
      {
        "name": "disabled",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If `true`, prevents the user from interacting with the group.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "required",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If `true`, indicates that the user must select a radio button before\nthe owning form can be submitted.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "loop",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If the the button selection should loop when navigating with the arrow keys.",
        "defaultValue": "true",
        "optional": true
      },
      {
        "name": "selectWhenFocused",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If `true`, the value will be changed whenever a button is focused.",
        "defaultValue": "true",
        "optional": true
      },
      {
        "name": "orientation",
        "type": "MaybeGetter<\"horizontal\" | \"vertical\" | undefined>",
        "description": "The orientation of the slider.",
        "defaultValue": "\"vertical\"",
        "optional": true
      },
      {
        "name": "name",
        "type": "MaybeGetter<string | undefined>",
        "description": "Input name for radio group.",
        "optional": true
      },
      {
        "name": "value",
        "type": "MaybeGetter<string | undefined>",
        "description": "Default value for radio group.",
        "defaultValue": "\"\"",
        "optional": true
      },
      {
        "name": "onValueChange",
        "type": "((active: string) => void) | undefined",
        "description": "Called when the radio button is clicked.",
        "optional": true
      }
    ],
    "methods": [
      {
        "name": "getItem",
        "type": "(item: string) => RadioItem",
        "description": ""
      },
      {
        "name": "select",
        "type": "(item: string) => void",
        "description": ""
      }
    ],
    "properties": [
      {
        "name": "disabled",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "required",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "loop",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "selectWhenFocused",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "orientation",
        "type": "\"horizontal\" | \"vertical\"",
        "description": ""
      },
      {
        "name": "value",
        "type": "string",
        "description": ""
      },
      {
        "name": "root",
        "type": "{\n  readonly \"data-melt-radio-group-root\": \"\"\n  readonly id: string\n  readonly role: \"radiogroup\"\n  readonly \"aria-required\": boolean\n  readonly \"aria-labelledby\": string\n  readonly \"data-orientation\": \"horizontal\" | \"vertical\"\n  readonly \"data-disabled\": true | undefined\n  readonly \"data-value\": string\n}",
        "description": ""
      },
      {
        "name": "label",
        "type": "{\n  readonly \"data-melt-radio-group-label\": \"\"\n  readonly id: string\n  readonly for: string\n  readonly onclick: (\n    e: MouseEvent & { currentTarget: EventTarget & HTMLLabelElement },\n  ) => void\n  readonly \"data-orientation\": \"horizontal\" | \"vertical\"\n  readonly \"data-disabled\": true | undefined\n  readonly \"data-value\": string\n}",
        "description": ""
      },
      {
        "name": "hiddenInput",
        "type": "{\n  readonly \"data-melt-radio-group-hidden-input\": \"\"\n  readonly disabled: boolean\n  readonly required: boolean\n  readonly hidden: true\n  readonly \"aria-hidden\": true\n  readonly tabindex: -1\n  readonly value: string\n  readonly name: string | undefined\n}",
        "description": ""
      }
    ],
    "propsAlt": "export type RadioGroupProps = {\n  /**\n   * If `true`, prevents the user from interacting with the group.\n   *\n   * @default false\n   */\n  disabled?: MaybeGetter<boolean | undefined>;\n  /**\n   * If `true`, indicates that the user must select a radio button before\n   * the owning form can be submitted.\n   *\n   * @default false\n   */\n  required?: MaybeGetter<boolean | undefined>;\n  /**\n   * If the the button selection should loop when navigating with the arrow keys.\n   *\n   * @default true\n   */\n  loop?: MaybeGetter<boolean | undefined>;\n  /**\n   * If `true`, the value will be changed whenever a button is focused.\n   *\n   * @default true\n   */\n  selectWhenFocused?: MaybeGetter<boolean | undefined>;\n  /**\n   * The orientation of the slider.\n   *\n   * @default \"vertical\"\n   */\n  orientation?: MaybeGetter<\"horizontal\" | \"vertical\" | undefined>;\n  /**\n   * Input name for radio group.\n   */\n  name?: MaybeGetter<string | undefined>;\n  /**\n   * Default value for radio group.\n   *\n   * @default \"\"\n   */\n  value?: MaybeGetter<string | undefined>;\n  /**\n   * Called when the radio button is clicked.\n   */\n  onValueChange?: (active: string) => void;\n};"
  },
  "Progress": {
    "constructorProps": [
      {
        "name": "value",
        "type": "MaybeGetter<number | undefined>",
        "description": "The value for the progress.",
        "defaultValue": "undefined",
        "optional": true
      },
      {
        "name": "max",
        "type": "MaybeGetter<number | undefined>",
        "description": "The maximum value of the progress.",
        "optional": true
      },
      {
        "name": "onValueChange",
        "type": "((value: number) => void) | undefined",
        "description": "The callback invoked when the value of the progress changes.",
        "optional": true
      }
    ],
    "methods": [],
    "properties": [
      {
        "name": "max",
        "type": "number",
        "description": ""
      },
      {
        "name": "value",
        "type": "number",
        "description": ""
      },
      {
        "name": "root",
        "type": "{\n  \"data-melt-progress-root\": string\n  value: number\n  max: number\n  role: string\n  \"aria-valuemin\": number\n  \"aria-valuemax\": number\n  \"aria-valuenow\": number\n  \"data-value\": number\n  \"data-state\": string\n  \"data-max\": number\n}",
        "description": "Spread attributes for the Progress root element."
      },
      {
        "name": "progress",
        "type": "{\n  \"data-melt-progress-progress\": string\n  style: `--progress: ${string}; --neg-progress: ${string}`\n}",
        "description": "Spread attributes for the Progress percentage element.\nProvides a --progress CSS variable that can be used to style the progress:\n`transform: translateX(calc(var(--progress) * -1));`"
      }
    ],
    "propsAlt": "export type ProgressProps = {\n  /**\n   * The value for the progress.\n   *\n   * @default undefined\n   */\n  value?: MaybeGetter<number | undefined>;\n\n  /**\n   * The maximum value of the progress.\n   *\n   * @deafult 100\n   */\n  max?: MaybeGetter<number | undefined>;\n\n  /**\n   * The callback invoked when the value of the progress changes.\n   */\n  onValueChange?: (value: number) => void;\n};"
  },
  "Popover": {
    "constructorProps": [
      {
        "name": "open",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If the Popover is open.\n\nWhen passing a getter, it will be used as source of truth,\nmeaning that the value only changes when the getter returns a new value.\n\nOtherwise, if passing a static value, it'll serve as the default value.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "onOpenChange",
        "type": "((value: boolean) => void) | undefined",
        "description": "Called when the value is supposed to change.",
        "optional": true
      },
      {
        "name": "forceVisible",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If the popover visibility should be controlled by the user.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "floatingConfig",
        "type": "UseFloatingConfig | undefined>",
        "description": "Config to be passed to `useFloating`",
        "optional": true
      },
      {
        "name": "sameWidth",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If the popover should have the same width as the trigger",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "closeOnEscape",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If the popover should close when clicking escape.",
        "defaultValue": "true",
        "optional": true
      },
      {
        "name": "closeOnOutsideClick",
        "type": "CloseOnOutsideClickProp",
        "description": "If the popover should close when clicking outside.\nAlternatively, accepts a function that receives the clicked element,\nand returns if the popover should close.",
        "defaultValue": "true",
        "optional": true
      }
    ],
    "methods": [],
    "properties": [
      {
        "name": "ids",
        "type": "{ invoker: string; popover: string } & {\n  trigger: string\n  content: string\n}",
        "description": ""
      },
      {
        "name": "trigger",
        "type": "{\n  readonly onfocusout: () => Promise<void>\n  readonly id: string\n  readonly popovertarget: string\n  readonly onclick: (e: Event) => void\n} & { \"data-melt-popover-trigger\": string }",
        "description": "The trigger that toggles the value."
      },
      {
        "name": "content",
        "type": "{\n  readonly onfocusout: () => Promise<void>\n  readonly id: string\n  readonly popover: \"manual\"\n  readonly ontoggle: (\n    e: ToggleEvent & { currentTarget: EventTarget & HTMLElement },\n  ) => void\n  readonly tabindex: -1\n  readonly inert: boolean\n  readonly \"data-open\": \"\" | undefined\n} & { \"data-melt-popover-content\": string }",
        "description": ""
      }
    ],
    "propsAlt": "export type PopoverProps = {\n  /**\n   * If the Popover is open.\n   *\n   * When passing a getter, it will be used as source of truth,\n   * meaning that the value only changes when the getter returns a new value.\n   *\n   * Otherwise, if passing a static value, it'll serve as the default value.\n   *\n   *\n   * @default false\n   */\n  open?: MaybeGetter<boolean | undefined>;\n\n  /**\n   * Called when the value is supposed to change.\n   */\n  onOpenChange?: (value: boolean) => void;\n\n  /**\n   * If the popover visibility should be controlled by the user.\n   *\n   * @default false\n   */\n  forceVisible?: MaybeGetter<boolean | undefined>;\n\n  /**\n   * Config to be passed to `useFloating`\n   */\n  floatingConfig?: UseFloatingArgs[\"config\"];\n\n  /**\n   * If the popover should have the same width as the trigger\n   *\n   * @default false\n   */\n  sameWidth?: MaybeGetter<boolean | undefined>;\n\n  /**\n   * If the popover should close when clicking escape.\n   *\n   * @default true\n   */\n  closeOnEscape?: MaybeGetter<boolean | undefined>;\n\n  /**\n   * If the popover should close when clicking outside.\n   * Alternatively, accepts a function that receives the clicked element,\n   * and returns if the popover should close.\n   *\n   * @default true\n   */\n  closeOnOutsideClick?: CloseOnOutsideClickProp;\n};"
  },
  "PinInput": {
    "constructorProps": [
      {
        "name": "value",
        "type": "MaybeGetter<string | undefined>",
        "description": "The value for the Pin Input.\n\nWhen passing a getter, it will be used as source of truth,\nmeaning that the value only changes when the getter returns a new value.\n\nOtherwise, if passing a static value, it'll serve as the default value.",
        "defaultValue": "''",
        "optional": true
      },
      {
        "name": "onValueChange",
        "type": "((value: string) => void) | undefined",
        "description": "Called when the `PinInput` instance tries to change the value.",
        "optional": true
      },
      {
        "name": "onComplete",
        "type": "((value: string) => void) | undefined",
        "description": "Called when the `PinInput` instance is filled.",
        "optional": true
      },
      {
        "name": "onPaste",
        "type": "((value: string) => void) | undefined",
        "description": "Override the default behavior when pasting a value.",
        "optional": true
      },
      {
        "name": "onError",
        "type": "((error: PinInputError) => void) | undefined",
        "description": "Called when the PinInput encounters an error.",
        "optional": true
      },
      {
        "name": "maxLength",
        "type": "MaybeGetter<number | undefined>",
        "description": "The amount of digits in the Pin Input.",
        "defaultValue": "4",
        "optional": true
      },
      {
        "name": "placeholder",
        "type": "MaybeGetter<string | undefined>",
        "description": "An optional placeholder to display when the input is empty.",
        "defaultValue": "'○'",
        "optional": true
      },
      {
        "name": "disabled",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If `true`, prevents the user from interacting with the input.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "mask",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If the input should be masked like a password.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "type",
        "type": "MaybeGetter<\"alphanumeric\" | \"numeric\" | \"text\" | undefined>",
        "description": "What characters the input accepts.",
        "defaultValue": "'text'",
        "optional": true
      },
      {
        "name": "allowPaste",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If `true`, allows pasting values from the clipboard.",
        "defaultValue": "true",
        "optional": true
      }
    ],
    "methods": [],
    "properties": [
      {
        "name": "maxLength",
        "type": "number",
        "description": ""
      },
      {
        "name": "placeholder",
        "type": "string",
        "description": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "mask",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "type",
        "type": "\"alphanumeric\" | \"numeric\" | \"text\"",
        "description": ""
      },
      {
        "name": "allowPaste",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "isFilled",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "value",
        "type": "string",
        "description": ""
      },
      {
        "name": "root",
        "type": "{\n  readonly \"data-melt-pin-input-root\": \"\"\n  readonly id: string\n  readonly \"data-complete\": \"\" | undefined\n}",
        "description": "The root element's props."
      },
      {
        "name": "inputs",
        "type": "{\n  readonly \"data-melt-pin-input-input\": \"\"\n  readonly placeholder: string | undefined\n  readonly disabled: true | undefined\n  readonly type: \"text\" | \"password\"\n  readonly \"data-filled\": \"\" | undefined\n  readonly tabindex: 0 | -1\n  readonly inputmode: \"numeric\" | \"text\"\n  readonly style: \"caret-color: transparent;\" | undefined\n  readonly onkeydown: (e: KeyboardEvent) => void\n  readonly onpointerdown: (e: Event) => void\n  readonly onpointerup: (e: Event) => void\n  readonly oninput: (e: Event) => void\n  readonly onfocus: () => void\n  readonly onblur: () => void\n  readonly onpaste: (\n    e: ClipboardEvent & { currentTarget: EventTarget & HTMLInputElement },\n  ) => void\n}[]",
        "description": "An array of props that should be spread to the input elements."
      }
    ],
    "propsAlt": "export type PinInputProps = {\n  /**\n   * The value for the Pin Input.\n   *\n   * When passing a getter, it will be used as source of truth,\n   * meaning that the value only changes when the getter returns a new value.\n   *\n   * Otherwise, if passing a static value, it'll serve as the default value.\n   *\n   *\n   * @default ''\n   */\n  value?: MaybeGetter<string | undefined>;\n  /**\n   * Called when the `PinInput` instance tries to change the value.\n   */\n  onValueChange?: (value: string) => void;\n\n  /**\n   * Called when the `PinInput` instance is filled.\n   */\n  onComplete?: (value: string) => void;\n\n  /**\n   * Override the default behavior when pasting a value.\n   *\n   * @param value The pasted value.\n   *\n   * @example ```ts\n   * const pin = new PinInput({\n   *   onPaste(value) {\n   *     if (!valid(value)) {\n   *       // do something\n   *       return\n   *     }\n   *     pin.value = value\n   *   }\n   * });\n   */\n  onPaste?: (value: string) => void;\n\n  /**\n   * Called when the PinInput encounters an error.\n   */\n  onError?: (error: PinInputError) => void;\n\n  /**\n   * The amount of digits in the Pin Input.\n   *\n   * @default 4\n   */\n  maxLength?: MaybeGetter<number | undefined>;\n  /**\n   * An optional placeholder to display when the input is empty.\n   *\n   * @default '○'\n   */\n  placeholder?: MaybeGetter<string | undefined>;\n\n  /**\n   * If `true`, prevents the user from interacting with the input.\n   *\n   * @default false\n   */\n  disabled?: MaybeGetter<boolean | undefined>;\n\n  /**\n   * If the input should be masked like a password.\n   *\n   * @default false\n   */\n  mask?: MaybeGetter<boolean | undefined>;\n\n  /**\n   * What characters the input accepts.\n   *\n   * @default 'text'\n   */\n  type?: MaybeGetter<\"alphanumeric\" | \"numeric\" | \"text\" | undefined>;\n\n  /**\n   * If `true`, allows pasting values from the clipboard.\n   *\n   * @default true\n   */\n  allowPaste?: MaybeGetter<boolean | undefined>;\n};"
  },
  "FileUpload": {
    "constructorProps": [
      {
        "name": "selected",
        "type": "MaybeMultiple<File, Multiple> | undefined",
        "description": "The currently selected files.",
        "optional": true
      },
      {
        "name": "onSelectedChange",
        "type": "| ((files: Multiple extends true ? Set<File> : File | undefined) => void)\n  | undefined",
        "description": "Callback fired when selected files change",
        "optional": true
      },
      {
        "name": "multiple",
        "type": "MaybeGetter<Multiple | undefined>",
        "description": "Whether to accept multiple files",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "accept",
        "type": "MaybeGetter<string | undefined>",
        "description": "The accepted file types. Can be a MIME type, a MIME group, or a file extension.\nSeparate multiple types with a comma.",
        "optional": true
      },
      {
        "name": "maxSize",
        "type": "MaybeGetter<number | undefined>",
        "description": "Maximum file size in bytes",
        "defaultValue": "undefined",
        "optional": true
      },
      {
        "name": "disabled",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "Whether the file upload is disabled",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "validate",
        "type": "((file: File) => boolean) | undefined",
        "description": "Custom validate fn. Will be called together with the original validation,\nwhich takes into account the `accept` and `maxSize` props.",
        "optional": true
      },
      {
        "name": "onError",
        "type": "((error: FileUploadError) => void) | undefined",
        "description": "Callback fired when a file fails validation",
        "optional": true
      },
      {
        "name": "onAccept",
        "type": "((file: File) => void) | undefined",
        "description": "Callback fired when a file is accepted",
        "optional": true
      },
      {
        "name": "avoidDuplicates",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "If true, checks the files contents to avoid duplicate.\nIt's performance is not tested in large files, so by default its set to false.",
        "defaultValue": "false",
        "optional": true
      }
    ],
    "methods": [
      {
        "name": "clear",
        "type": "() => void",
        "description": "Clears the currently selected files"
      },
      {
        "name": "remove",
        "type": "(file: File) => void",
        "description": "Removes a file from the selection"
      },
      {
        "name": "has",
        "type": "(file: File) => Promise<boolean>",
        "description": ""
      }
    ],
    "properties": [
      {
        "name": "multiple",
        "type": "Multiple",
        "description": ""
      },
      {
        "name": "accept",
        "type": "string | undefined",
        "description": ""
      },
      {
        "name": "maxSize",
        "type": "number | undefined",
        "description": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "avoidDuplicates",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "isDragging",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "selected",
        "type": "SelectionStateValue<File, Multiple>",
        "description": "Gets the currently selected files"
      },
      {
        "name": "dropzone",
        "type": "{\n  readonly \"data-melt-fileupload-dropzone\": \"\"\n  readonly \"data-dragging\": \"\" | undefined\n  readonly \"data-disabled\": \"\" | undefined\n  readonly ondragenter: (e: DragEvent) => void\n  readonly ondragleave: (e: DragEvent) => void\n  readonly ondragover: (e: DragEvent) => void\n  readonly ondrop: (e: DragEvent) => void\n  readonly onclick: () => void\n}",
        "description": "The dropzone element, where you can drag files into, or click to open the file picker."
      },
      {
        "name": "input",
        "type": "{\n  readonly \"data-melt-fileupload-input\": \"\"\n  readonly id: string\n  readonly type: \"file\"\n  readonly accept: string | undefined\n  readonly multiple: Multiple\n  readonly style: \"display: none;\"\n  readonly disabled: boolean\n  readonly onchange: (e: Event) => void\n}",
        "description": "The hidden file input element."
      },
      {
        "name": "trigger",
        "type": "{\n  readonly \"data-disabled\": \"\" | undefined\n  readonly onclick: () => void\n}",
        "description": "An optional trigger element, which can be used to open the file picker."
      }
    ],
    "propsAlt": "export type FileUploadProps<Multiple extends boolean = false> = {\n  /**\n   * The currently selected files.\n   */\n  selected?: MaybeMultiple<File, Multiple>;\n\n  /**\n   * Callback fired when selected files change\n   */\n  onSelectedChange?: (files: Multiple extends true ? Set<File> : File | undefined) => void;\n\n  /**\n   * Whether to accept multiple files\n   * @default false\n   */\n  multiple?: MaybeGetter<Multiple | undefined>;\n\n  /**\n   * The accepted file types. Can be a MIME type, a MIME group, or a file extension.\n   * Separate multiple types with a comma.\n   * @example 'image/jpeg'\n   * @example 'image/*'\n   * @example '.png, .jpg, .jpeg'\n   */\n  accept?: MaybeGetter<string | undefined>;\n\n  /**\n   * Maximum file size in bytes\n   * @default undefined\n   */\n  maxSize?: MaybeGetter<number | undefined>;\n\n  /**\n   * Whether the file upload is disabled\n   * @default false\n   */\n  disabled?: MaybeGetter<boolean | undefined>;\n\n  /**\n   * Custom validate fn. Will be called together with the original validation,\n   * which takes into account the `accept` and `maxSize` props.\n   */\n  validate?: (file: File) => boolean;\n\n  /**\n   * Callback fired when a file fails validation\n   */\n  onError?: (error: FileUploadError) => void;\n\n  /**\n   * Callback fired when a file is accepted\n   */\n  onAccept?: (file: File) => void;\n\n  /**\n   * If true, checks the files contents to avoid duplicate.\n   * It's performance is not tested in large files, so by default its set to false.\n   *\n   * @default false\n   */\n  avoidDuplicates?: MaybeGetter<boolean | undefined>;\n};"
  },
  "Combobox": {
    "constructorProps": [
      {
        "name": "open",
        "type": "any",
        "description": "If the Popover is open.\n\nWhen passing a getter, it will be used as source of truth,\nmeaning that the value only changes when the getter returns a new value.\n\nOtherwise, if passing a static value, it'll serve as the default value.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "onOpenChange",
        "type": "any",
        "description": "Called when the value is supposed to change.",
        "optional": true
      },
      {
        "name": "forceVisible",
        "type": "any",
        "description": "If the popover visibility should be controlled by the user.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "floatingConfig",
        "type": "any",
        "description": "Config to be passed to `useFloating`",
        "optional": true
      },
      {
        "name": "multiple",
        "type": "MaybeGetter<Multiple | undefined>",
        "description": "If `true`, multiple options can be selected at the same time.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "value",
        "type": "MaybeMultiple<T, Multiple> | undefined",
        "description": "The value for the Select.\n\nWhen passing a getter, it will be used as source of truth,\nmeaning that the value only changes when the getter returns a new value.\n\nOtherwise, if passing a static value, it'll serve as the default value.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "onValueChange",
        "type": "OnMultipleChange<T, Multiple> | undefined",
        "description": "Called when the value is supposed to change.",
        "optional": true
      }
    ],
    "methods": [
      {
        "name": "select",
        "type": "(value: T) => void",
        "description": ""
      },
      {
        "name": "getOptionId",
        "type": "(value: T) => string",
        "description": ""
      },
      {
        "name": "getOption",
        "type": "(value: T) => {\n  readonly \"data-melt-combobox-option\": \"\"\n  readonly \"data-value\": DataReturn<T>\n  readonly \"aria-hidden\": true | undefined\n  readonly \"aria-selected\": boolean\n  readonly \"data-highlighted\": boolean\n  readonly role: \"option\"\n  readonly onmouseover: () => void\n  readonly onclick: () => void\n}",
        "description": ""
      }
    ],
    "properties": [
      {
        "name": "inputValue",
        "type": "string",
        "description": ""
      },
      {
        "name": "multiple",
        "type": "Multiple extends null | undefined\n  ? Multiple | undefined\n  : Multiple | Exclude<Multiple, null | undefined>",
        "description": ""
      },
      {
        "name": "highlighted",
        "type": "T | null",
        "description": ""
      },
      {
        "name": "touched",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "ids",
        "type": "{\n  trigger: string\n  content: string\n  option: string\n  input: string\n} & { invoker: string; popover: string }",
        "description": ""
      },
      {
        "name": "isSelected",
        "type": "(value: T) => boolean",
        "description": ""
      },
      {
        "name": "value",
        "type": "SelectionStateValue<T, Multiple>",
        "description": ""
      },
      {
        "name": "valueAsString",
        "type": "string",
        "description": ""
      },
      {
        "name": "input",
        "type": "{\n  readonly \"data-melt-combobox-input\": \"\"\n  readonly id: string\n  readonly role: \"combobox\"\n  readonly \"aria-expanded\": boolean\n  readonly \"aria-controls\": string\n  readonly \"aria-owns\": string\n  readonly onclick: undefined\n  readonly value: string\n  readonly oninput: (e: Event) => void\n  readonly onkeydown: (e: KeyboardEvent) => void\n  readonly onfocusout: () => Promise<void>\n  readonly popovertarget: string\n}",
        "description": ""
      },
      {
        "name": "trigger",
        "type": "{\n  onfocusout: () => Promise<void>\n  \"data-melt-combobox-trigger\": string\n  id: string\n  onclick: () => void\n}",
        "description": ""
      },
      {
        "name": "content",
        "type": "{\n  readonly onfocusout: () => Promise<void>\n  readonly id: string\n  readonly popover: \"manual\"\n  readonly ontoggle: (\n    e: ToggleEvent & { currentTarget: EventTarget & HTMLElement },\n  ) => void\n  readonly tabindex: -1\n  readonly inert: boolean\n  readonly \"data-open\": \"\" | undefined\n} & {\n  readonly \"data-melt-combobox-content\": \"\"\n  readonly role: \"listbox\"\n  readonly \"aria-expanded\": boolean\n  readonly \"aria-activedescendant\": string | undefined\n}",
        "description": ""
      }
    ],
    "propsAlt": "export type ComboboxProps<T extends string, Multiple extends boolean = false> = Omit<\n  PopoverProps,\n  \"closeOnEscape\" | \"closeOnOutsideClick\" | \"sameWidth\"\n> & {\n  /**\n   * If `true`, multiple options can be selected at the same time.\n   *\n   * @default false\n   */\n  multiple?: MaybeGetter<Multiple | undefined>;\n\n  /**\n   * The value for the Select.\n   *\n   * When passing a getter, it will be used as source of truth,\n   * meaning that the value only changes when the getter returns a new value.\n   *\n   * Otherwise, if passing a static value, it'll serve as the default value.\n   *\n   *\n   * @default false\n   */\n  value?: MaybeMultiple<T, Multiple>;\n  /**\n   * Called when the value is supposed to change.\n   */\n  onValueChange?: OnMultipleChange<T, Multiple>;\n};"
  },
  "Collapsible": {
    "constructorProps": [
      {
        "name": "disabled",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "Whether the collapsible is disabled which prevents it from being opened.",
        "optional": true
      },
      {
        "name": "open",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "Whether the collapsible is open.",
        "optional": true
      },
      {
        "name": "onOpenChange",
        "type": "((value: boolean) => void) | undefined",
        "description": "A callback called when the value of `open` changes.",
        "optional": true
      }
    ],
    "methods": [],
    "properties": [
      {
        "name": "disabled",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "open",
        "type": "boolean",
        "description": "The open state of the collapsible."
      },
      {
        "name": "trigger",
        "type": "{\n  readonly disabled: boolean\n  readonly onclick: () => void\n  readonly \"data-state\": string\n  readonly \"data-disabled\": \"\" | undefined\n  readonly \"data-melt-collapsible-trigger\": \"\"\n  readonly id: string\n  readonly \"aria-expanded\": boolean\n  readonly \"aria-controls\": string\n}",
        "description": "The spread attributes for the trigger button."
      },
      {
        "name": "content",
        "type": "{\n  readonly \"data-state\": string\n  readonly \"data-disabled\": \"\" | undefined\n  readonly \"data-melt-collapsible-content\": \"\"\n  readonly id: string\n}",
        "description": "The spread attributes for the content element."
      }
    ],
    "propsAlt": "export type CollapsibleProps = {\n  /**\n   * Whether the collapsible is disabled which prevents it from being opened.\n   */\n  disabled?: MaybeGetter<boolean | undefined>;\n\n  /**\n   * Whether the collapsible is open.\n   */\n  open?: MaybeGetter<boolean | undefined>;\n\n  /**\n   * A callback called when the value of `open` changes.\n   */\n  onOpenChange?: (value: boolean) => void;\n};"
  },
  "Avatar": {
    "constructorProps": [
      {
        "name": "src",
        "type": "MaybeGetter<string | undefined>",
        "description": "The source of the image to display.",
        "optional": true
      },
      {
        "name": "delayMs",
        "type": "MaybeGetter<number | undefined>",
        "description": "The amount of time in milliseconds to wait before displaying the image.",
        "defaultValue": "0",
        "optional": true
      },
      {
        "name": "onLoadingStatusChange",
        "type": "((value: ImageLoadingStatus) => void | undefined) | undefined",
        "description": "A callback invoked when the loading status store of the avatar changes.",
        "optional": true
      }
    ],
    "methods": [],
    "properties": [
      {
        "name": "src",
        "type": "string",
        "description": ""
      },
      {
        "name": "delayMs",
        "type": "number",
        "description": ""
      },
      {
        "name": "loadingStatus",
        "type": "ImageLoadingStatus",
        "description": ""
      },
      {
        "name": "image",
        "type": "{\n  readonly \"data-melt-avatar-image\": \"\"\n  readonly src: string\n  readonly style: `display: ${string}`\n  readonly onload: () => (() => void) | undefined\n  readonly onerror: () => void\n}",
        "description": ""
      },
      {
        "name": "fallback",
        "type": "{\n  readonly \"data-melt-avatar-fallback\": \"\"\n  readonly style: `display: ${string}` | undefined\n  readonly hidden: true | undefined\n}",
        "description": ""
      }
    ],
    "propsAlt": "export type AvatarProps = {\n  /**\n   * The source of the image to display.\n   */\n  src?: MaybeGetter<string | undefined>;\n\n  /**\n   * The amount of time in milliseconds to wait before displaying the image.\n   *\n   * @default 0\n   */\n  delayMs?: MaybeGetter<number | undefined>;\n\n  /**\n   * A callback invoked when the loading status store of the avatar changes.\n   */\n  onLoadingStatusChange?: (value: ImageLoadingStatus) => void | undefined;\n};"
  },
  "Accordion": {
    "constructorProps": [
      {
        "name": "multiple",
        "type": "MaybeGetter<Multiple | undefined>",
        "description": "If `true`, multiple accordion items can be open at the same time.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "disabled",
        "type": "MaybeGetter<boolean | undefined>",
        "description": "When `true`, prevents the user from interacting with the accordion.",
        "defaultValue": "false",
        "optional": true
      },
      {
        "name": "value",
        "type": "MaybeMultiple<string, Multiple> | undefined",
        "description": "The controlled value for the accordion.",
        "optional": true
      },
      {
        "name": "onValueChange",
        "type": "OnMultipleChange<string, Multiple> | undefined",
        "description": "The callback invoked when the value of the Accordion changes.",
        "optional": true
      }
    ],
    "methods": [
      {
        "name": "getItem",
        "type": "<Meta extends Record<string, unknown>>(\n  item: AccordionItem<Meta>,\n) => Item<Meta, Multiple>",
        "description": "Returns an Item class with the necessary\nspread attributes for an accordion item.\n@param item"
      },
      {
        "name": "isExpanded",
        "type": "(id: string) => boolean",
        "description": "Checks if an item is currently expanded.\n@param id - ID of the item to check."
      },
      {
        "name": "expand",
        "type": "(id: string) => void",
        "description": "Expands a specific item.\n@param id - ID of the item to expand."
      },
      {
        "name": "collapse",
        "type": "(id: string) => void",
        "description": "Collapses a specific item.\n@param id - ID of the item to collapse."
      },
      {
        "name": "toggleExpanded",
        "type": "(id: string) => void",
        "description": "Toggles the expanded state of an item.\n@param id - ID of the item to toggle."
      }
    ],
    "properties": [
      {
        "name": "multiple",
        "type": "Multiple extends null | undefined\n  ? Multiple | undefined\n  : Multiple | Exclude<Multiple, null | undefined>",
        "description": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "value",
        "type": "FalseIfUndefined<Multiple>>",
        "description": ""
      },
      {
        "name": "root",
        "type": "{ \"data-melt-accordion-root\": string; id: string }",
        "description": "Spread attributes for the accordion root element."
      }
    ],
    "propsAlt": "export type AccordionProps<Multiple extends boolean = false> = {\n  /**\n   * If `true`, multiple accordion items can be open at the same time.\n   *\n   * @default false\n   */\n  multiple?: MaybeGetter<Multiple | undefined>;\n\n  /**\n   * When `true`, prevents the user from interacting with the accordion.\n   *\n   * @default false\n   */\n  disabled?: MaybeGetter<boolean | undefined>;\n\n  /**\n   * The controlled value for the accordion.\n   */\n  value?: AccordionValue<Multiple>;\n\n  /**\n   * The callback invoked when the value of the Accordion changes.\n   */\n  onValueChange?: OnMultipleChange<string, Multiple>;\n};"
  }
}